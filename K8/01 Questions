
Before we begin, familiarize with the two options that can come in handy while working with the below commands:

--dry-run : By default as soon as the command is run, the resource will be created. If you simply want to test your command , use the --dry-run=client option. This will not create the resource, instead, tell you whether the resource can be created and if your command is right.

-o yaml: This will output the resource definition in YAML format on screen.

Use the above two in combination to generate a resource definition file quickly, that you can then modify and create resources as required, instead of creating the files from scratch.

POD
Create an NGINX Pod

kubectl run nginx --image=nginx
Generate POD Manifest YAML file (-o yaml). Don’t create it(–dry-run)

kubectl run nginx --image=nginx --dry-run=client -o yaml
Deployment
Create a deployment

kubectl create deployment --image=nginx nginx
Generate Deployment YAML file (-o yaml). Don’t create it(–dry-run)

`kubectl create deployment --image=nginx nginx --dry-run -o yaml`
Generate Deployment with 4 Replicas

kubectl create deployment nginx --image=nginx --replicas=4
You can also scale a deployment using the kubectl scale command.

kubectl scale deployment nginx --replicas=4
Another way to do this is to save the YAML definition to a file and modify

kubectl create deployment nginx --image=nginx--dry-run=client -o yaml > nginx-deployment.yaml
You can then update the YAML file with the replicas or any other field before creating the deployment.

Service
Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379

kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml
(This will automatically use the pod’s labels as selectors)

Or

kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml
(This will not use the pods labels as selectors, instead it will assume selectors as app=redis. You cannot pass in selectors as an option. So it does not work very well if your pod has a different label set. So generate the file and modify the selectors before creating the service)

Create a Service named nginx of type NodePort to expose pod nginx’s port 80 on port 30080 on the nodes:

kubectl expose pod nginx --port=80 --name nginx-service --type=NodePort --dry-run=client -o yaml
(This will automatically use the pod’s labels as selectors, but you cannot specify the node port. You have to generate a definition file and then add the node port in manually before creating the service with the pod.)

Or

kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run=client -o yaml
(This will not use the pods labels as selectors)

Both the above commands have their own challenges. While one of it cannot accept a selector the other cannot accept a node port. I would recommend going with the `kubectl expose` command. If you need to specify a node port, generate a definition file using the same command and manually input the nodeport before creating the service.


--------------------------------------------------------------------------------------------------------------------

he default output format for all kubectl commands is the human-readable plain-text format.

The -o flag allows us to output the details in several different formats.

**kubectl [command] [TYPE] [NAME] -o **

Here are some of the commonly used formats:

-o jsonOutput a JSON formatted API object.
-o namePrint only the resource name and nothing else.
-o wideOutput in the plain-text format with any additional information.
-o yamlOutput a YAML formatted API object.
Here are some useful examples:

Output with JSON format:
master $ kubectl create namespace test-123 --dry-run -o json
{
    "kind": "Namespace",
    "apiVersion": "v1",
    "metadata": {
        "name": "test-123",
        "creationTimestamp": null
    },
    "spec": {},
    "status": {}
}
master $
Output with YAML format:
master $ kubectl create namespace test-123 --dry-run -o yaml
apiVersion: v1
kind: Namespace
metadata:
  creationTimestamp: null
  name: test-123
spec: {}
status: {}
Output with wide (additional details):
Probably the most common format used to print additional details about the object:

master $ kubectl get pods -o wide
NAME      READY   STATUS    RESTARTS   AGE     IP          NODE     NOMINATED NODE   READINESS GATES
busybox   1/1     Running   0          3m39s   10.36.0.2   node01          <​none​>         <​none​>  
ningx     1/1     Running   0          7m32s   10.44.0.1   node03          <​none​>         <​none​> 
redis     1/1     Running   0          3m59s   10.36.0.1   node01          <​none​>         <​none​> 
master $
For more details, refer:

https://kubernetes.io/docs/reference/kubectl/overview/

https://kubernetes.io/docs/reference/kubectl/cheatsheet/


kubectl run redis --image=redis:alpine --dry-run=client -oyaml > redis-pod.yaml

kubectl expose pod redis --port=6379 --name redis-service --type ClusterIP --dry-run=client -o yaml

kubectl expose pod redis --port=6379 --name=redis-service --type=ClusterIP


----------------------------

Create a deployment named webapp using the image kodekloud/webapp-color with 3 replicas.


Try to use imperative commands only. Do not create definition files.



Name: webapp

Image: kodekloud/webapp-color

Replicas: 3

"kubectl create deployment  webapp --image=kodekloud/webapp-color --replicas=3"

------------------------------

Create a new pod called custom-nginx using the nginx image and run it on container port 8080

kubectl run custom-nginx --image=nginx --port=8080

------------------------------

Create a new deployment called redis-deploy in the dev-ns namespace with the redis image. It should have 2 replicas.


Use imperative commands.



'redis-deploy' created in the 'dev-ns' namespace?

replicas: 2


kubectl create deployment redis-deploy --image=redis --replicas=2 -n dev-ns

-----------------------------------

Create a pod named httpd using the image httpd:alpine in the default namespace.
Then, create a service of type ClusterIP with the same name (httpd) that exposes the pod on port 80.


Try to do this with as few steps as possible.



'httpd' pod created with the correct image?

'httpd' service is of type 'ClusterIP'?

'httpd' service uses correct target port 80?

'httpd' service exposes the 'httpd' pod?

"kubectl run httpd --image=httpd:alpine --port=80 --expose"

--------------------------------------------------------------------------------------------

Remember, you CANNOT edit specifications of an existing POD other than the below.

spec.containers[*].image

spec.initContainers[*].image

spec.activeDeadlineSeconds

spec.tolerations

For example, you cannot edit the environment variables, service accounts, and resource limits (all of which we will discuss later) of a running pod. But if you really want to, you have two options:

1. Run the kubectl edit pod command. This will open the pod specification in an editor (vi editor). Then, edit the required properties. When you try to save it, you will be denied. This is because you are attempting to edit a field on the pod that is not editable.

Image

Image

A copy of the file with your changes is saved in a temporary location, as shown above.

You can then delete the existing pod by running the command:

kubectl delete pod webapp
Then, create a new pod with your changes using the temporary file:

kubectl create -f /tmp/kubectl-edit-ccvrq.yaml
2. The second option is to extract the pod definition in YAML format to a file using the command

kubectl get pod webapp -o yaml > my-new-pod.yaml
Then, make the changes to the exported file using an editor (vi editor). Save the changes

vi my-new-pod.yaml
Then, delete the existing pod.

kubectl delete pod webapp
Then, create a new pod with the edited file.

kubectl create -f my-new-pod.yaml
Edit Deployments
With Deployments, you can easily edit any field/property of the POD template. Since the pod template is a child of the deployment specification, with every change, the deployment will automatically delete and create a new pod with the new changes. So, if you are asked to edit a property of a POD part of a deployment, you may do that simply by running the command.

kubectl edit deployment my-deployment

----------------------------------
ps -aux | grep kubeapi

ps aux	Shows all running processes with detailed info:

a: all users

u: show user/owner

x: include processes not attached to a terminal |
| | grep kubeapi | Filters output to only show lines containing kubeapi (like the Kubernetes API server) |

Use Case:
Useful for:

Verifying if the Kubernetes control plane is running (on master/control node)

Debugging system resource usage

Finding PID to inspect or kill a stuck process (not recommended unless necessary)

---------------------------------
What is the user used to execute the sleep process within the ubuntu-sleeper pod?

1. Get into the Pod:
bash
Copy
Edit
kubectl exec -it ubuntu-sleeper -- bash
(If it doesn't have bash, use sh instead.)

2. Check the sleep process user:
Inside the container, run:

bash
Copy
Edit
ps aux | grep sleep
You’ll get output like:

yaml
Copy
Edit
root         7  0.0  0.0   4248   652 ?        Ss   10:00   0:00 sleep 1000
✅ Answer:
The user is usually root unless explicitly changed in the pod/container spec using securityContext.runAsUser.

🔍 How to Know Without Entering the Pod
If you want to check via YAML:

bash
Copy
Edit
kubectl get pod ubuntu-sleeper -o yaml
Look for something like:

yaml
Copy
Edit
securityContext:
  runAsUser: 1000
If this is absent, the container defaults to running as root.

🚀 TL;DR:
By default, the sleep process inside the ubuntu-sleeper pod runs as root user — unless a custom runAsUser or non-root base image is used.

========================

kubectl create deployment blue --image=nginx --replicas=3


> How many objects are in the prod environment including PODs, ReplicaSets and any other objects?

= kubectl get all --selector env=prod

the above command will list out all objects availale in that env

for ex: pod, svc, dployment, replicaset

> Identify the POD which is part of the prod environment, the finance BU and of frontend tier?
= kubectl get all --selector env=prod,bu=finance,tier=frontend

above command will find the specific object releted to given conditions


The ReplicaSet "replicaset-1" is invalid: spec.template.metadata.labels: Invalid value: map[string]string{"tier":"nginx"}: `selector` does not match template `labels`

====================================================================
🛠 Real-World Examples:
Use Case	Readiness	Liveness
Java Spring Boot app that takes time to start	Avoids traffic before app is ready	Restarts app if JVM gets stuck
Database-dependent service	Waits until DB connection is established	Restarts if DB connection is lost permanently
Queue consumer (like Kafka consumer)	Waits for topic subscription	Restarts if consumer hangs
Microservices in production	Ensures dependencies (cache, auth, DB) are ready before traffic	Keeps service healthy and auto-healing


==================================================================

We have deployed Ingress Controller, resources and applications. Explore the setup.

Note: They are in different namespaces.

✅ Step 1: Get All Namespaces

kubectl get ns


✅ Step 2: Inspect the Ingress Controller
Usually in namespace like ingress-nginx:


kubectl get pods -n ingress-nginx
kubectl get svc -n ingress-nginx
kubectl describe svc ingress-nginx-controller -n ingress-nginx

✅ Step 3: Check All Ingress Resources (All Namespaces)

kubectl get ingress --all-namespaces
To see details of each Ingress:


kubectl describe ingress <ingress-name> -n <namespace>

✅ Step 4: Explore the Backend Applications
Apps may be in a different namespace (e.g., default, app1, etc.):


kubectl get pods -n <namespace>
kubectl get svc -n <namespace>

✅ Step 5: Check for TLS (If Configured)
Look for secrets used in Ingress:

kubectl get secret -n <namespace>
kubectl describe secret <tls-secret-name> -n <namespace>
If using cert-manager:


kubectl get certificate -A
kubectl get issuer -A

✅ Step 7: YAML Reference (Optional)
To review the full configuration:

kubectl get ingress <name> -n <namespace> -o yaml
kubectl get svc <name> -n <namespace> -o yaml
kubectl get deploy <name> -n <namespace> -o yaml


-------------


Identify the short names of the deployments, replicasets, cronjobs and customresourcedefinitions

hint: Take the help of the kubectl api-resources command and identify the short names.

kubectl api-resources