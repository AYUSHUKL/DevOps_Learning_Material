📦 Terraform Modules – The Ultimate Guide
🔍 What is a Terraform Module?
"A module is just a folder with Terraform configuration files."

Modules are reusable, self-contained units of Terraform code — just like functions in programming. They help you write DRY (Don't Repeat Yourself) infrastructure.

🎯 Why Use Modules?
💡 Reason	💬 Explanation
✅ Reusability	Define once, reuse for dev, staging, prod
✅ Maintainability	Centralize logic in one place
✅ Abstraction	Hide complexity behind a simple interface
✅ Scalability	Easily spin up multiple resources consistently
✅ Team collaboration	Separate concerns using well-structured modules

🧱 Module Types
Type	Description
Root Module	Your main configuration directory (where you run terraform apply)
Child Module	A module called from the root (or another module)
External Module	Pulled from Terraform Registry, GitHub, or a file path

🛠️ Module Structure
css
Copy
Edit
modules/
└── ec2_instance/
    ├── main.tf
    ├── variables.tf
    └── outputs.tf
✅ How to Use a Module
hcl
Copy
Edit
module "web_server" {
  source        = "./modules/ec2_instance"
  instance_type = "t2.micro"
  ami_id        = "ami-12345678"
}
source can be:

Local path: "./modules/xyz"

GitHub: "git::https://github.com/user/repo//path"

Terraform Registry: "terraform-aws-modules/vpc/aws"

✏️ Inside a Module
variables.tf
hcl
Copy
Edit
variable "instance_type" {}
variable "ami_id" {}
main.tf
hcl
Copy
Edit
resource "aws_instance" "this" {
  ami           = var.ami_id
  instance_type = var.instance_type
}
outputs.tf
hcl
Copy
Edit
output "instance_id" {
  value = aws_instance.this.id
}
📤 Module Outputs
Access module outputs like this:

hcl
Copy
Edit
output "web_id" {
  value = module.web_server.instance_id
}
💼 Interview Use Cases
💬 Interview Question	✅ Pro Tip Answer
“How do you manage multi-environment deployments?”	“I use modules with separate workspaces or terraform.tfvars files for dev/stage/prod”
“How do you ensure consistency in large setups?”	“By using reusable modules published in private or public registries”
“What if one module needs output from another?”	“Use module.<name>.<output> to chain them”

⚠️ Best Practices
✅ Use outputs.tf, variables.tf, and main.tf
✅ Always pin versions of external modules
✅ Use terraform-docs to document your module inputs/outputs
✅ Keep modules focused — single responsibility principle
✅ Validate with terraform validate and test with terraform plan

🧠 Bonus: Module from Terraform Registry
hcl
Copy
Edit
module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "5.1.1"

  name = "my-vpc"
  cidr = "10.0.0.0/16"

  azs             = ["us-east-1a", "us-east-1b"]
  private_subnets = ["10.0.1.0/24", "10.0.2.0/24"]
}
Just plug and play — the registry module does the heavy lifting.

🧩 Quick Recap
Concept	Keyword
Reusable block	Module
Main entry	Root module
Reusable child	Child module
Input params	variable block
Output values	output block
Remote source	Registry / Git




 Real-World Terraform Project Structure (with Modules & Environments)
css
Copy
Edit
terraform-project/
├── modules/
│   ├── ec2/
│   │   ├── main.tf
│   │   ├── variables.tf
│   │   └── outputs.tf
│   ├── vpc/
│   │   ├── main.tf
│   │   ├── variables.tf
│   │   └── outputs.tf
│   └── s3/
│       ├── main.tf
│       ├── variables.tf
│       └── outputs.tf
│
├── environments/
│   ├── dev/
│   │   ├── main.tf
│   │   ├── variables.tf
│   │   ├── terraform.tfvars
│   │   └── backend.tf
│   └── prod/
│       ├── main.tf
│       ├── variables.tf
│       ├── terraform.tfvars
│       └── backend.tf
│
├── provider.tf
└── versions.tf
🧱 Sample Module Template: modules/ec2/
main.tf
hcl
Copy
Edit
resource "aws_instance" "this" {
  ami           = var.ami
  instance_type = var.instance_type
  tags = {
    Name = var.name
  }
}
variables.tf
hcl
Copy
Edit
variable "ami" {
  description = "AMI ID"
  type        = string
}

variable "instance_type" {
  description = "EC2 instance type"
  type        = string
  default     = "t2.micro"
}

variable "name" {
  description = "Name tag for the instance"
  type        = string
}
outputs.tf
hcl
Copy
Edit
output "instance_id" {
  value = aws_instance.this.id
}
🌍 Sample Dev Environment: environments/dev/main.tf
hcl
Copy
Edit
provider "aws" {
  region = var.aws_region
}

module "ec2" {
  source        = "../../modules/ec2"
  ami           = var.ami
  instance_type = var.instance_type
  name          = "dev-ec2"
}
terraform.tfvars
hcl
Copy
Edit
aws_region     = "us-east-1"
ami            = "ami-0c55b159cbfafe1f0"
instance_type  = "t2.small"
variables.tf
hcl
Copy
Edit
variable "aws_region" {}
variable "ami" {}
variable "instance_type" {}
backend.tf (optional for remote state)
hcl
Copy
Edit
terraform {
  backend "s3" {
    bucket         = "my-terraform-state"
    key            = "dev/terraform.tfstate"
    region         = "us-east-1"
    dynamodb_table = "terraform-lock-table"
    encrypt        = true
  }
}
🚀 How to Use
bash
Copy
Edit
cd environments/dev
terraform init
terraform plan
terraform apply
🔁 Same structure applies to prod/, just with different terraform.tfvars.

✅ Benefits for Interviews & Teams
Benefit	Why It Impresses
✅ Separation of concerns	Easy to manage per module/environment
✅ Scalable & team-friendly	Devs can work in parallel
✅ Reusable & DRY	Modules used across environments
✅ Production-grade	Reflects what real companies do

