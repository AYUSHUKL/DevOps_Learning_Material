🧭 Terraform Workspaces – Explained
🧠 What Are Workspaces?
A Terraform workspace is an isolated instance of your Terraform state.

Think of it as separate environments (like dev, staging, prod) — all using the same code, but different states.

🗂️ Default Workspace
When you run terraform init, Terraform creates a workspace called:

bash
Copy
Edit
default
This is used unless you explicitly create or switch to another one.

🛠️ Common Commands
Command	What It Does
terraform workspace list	Lists all workspaces
terraform workspace new dev	Creates a new workspace named dev
terraform workspace select dev	Switches to workspace dev
terraform workspace show	Shows the current active workspace
terraform workspace delete dev	Deletes workspace dev

💡 Use Case Example
hcl
Copy
Edit
resource "aws_s3_bucket" "mybucket" {
  bucket = "my-bucket-${terraform.workspace}"
}
✅ Creates unique S3 buckets per environment:

my-bucket-dev

my-bucket-prod

📁 How State is Handled?
Each workspace has its own state file

Stored under .terraform/ directory (or in remote backend like S3)

Lets you manage multiple isolated environments using the same codebase

🧠 In Interviews: Must Know
Question	Smart Answer
"How do you manage multiple environments?"	"I use workspaces to isolate state while using the same code for each environment."
"Can workspaces replace directories like dev/prod?"	"Workspaces isolate state but don’t replace code-level differences. For heavy differences, use separate folders or modules."
"Where do you use terraform.workspace?"	"In dynamic resource naming, tagging, and conditionals"

⚠️ Workspace vs. Directory Pattern
Feature	Workspaces	Directory Pattern (dev/, prod/)
Code reuse	✅ Yes	❌ Usually code is duplicated
State isolation	✅ Automatic	✅ via separate backends
Complex differences	❌ Hard to manage	✅ Easier with custom .tf per env
Best for	Small config changes	Large infra differences

✅ Best Practice: Use Workspaces for light multi-env infra, use directory/module pattern for larger differences.

🧪 Pro Tip: Use in Remote Backend (like S3)
hcl
Copy
Edit
terraform {
  backend "s3" {
    bucket         = "my-tf-state"
    key            = "env/${terraform.workspace}/terraform.tfstate"
    region         = "us-east-1"
    dynamodb_table = "terraform-locks"
  }
}
📦 Automatically saves state in folders like:

env/dev/terraform.tfstate

env/prod/terraform.tfstate

🔁 Workspace-Aware Resource Example
hcl
Copy
Edit
locals {
  is_prod = terraform.workspace == "prod"
}

resource "aws_instance" "app" {
  instance_type = local.is_prod ? "t3.large" : "t3.micro"
}
🏁 Summary Table
Term	Meaning
terraform workspace	CLI tool to manage stateful environments
terraform.workspace	Interpolation for current workspace name
default workspace	The one Terraform creates by default
State isolation	Each workspace has its own .tfstate file


------------------
sample
----------------
Awesome! Here’s a sample Terraform project using multiple workspaces, designed to be:

✅ Simple to run locally

✅ Easily extendable for remote state (S3 + DynamoDB backend)

✅ Workspace-aware (dynamic names, values based on environment)

📁 Project Structure
css
Copy
Edit
multi-workspace-project/
├── main.tf
├── variables.tf
├── outputs.tf
├── backend.tf
└── terraform.tfvars
📄 backend.tf (optional – for remote S3 backend)
hcl
Copy
Edit
terraform {
  backend "s3" {
    bucket         = "my-terraform-backend-bucket"
    key            = "env/${terraform.workspace}/terraform.tfstate"
    region         = "us-east-1"
    dynamodb_table = "terraform-lock-table"
    encrypt        = true
  }
}
💡 Don't run terraform apply yet. First do terraform init and terraform workspace new.

📄 main.tf
hcl
Copy
Edit
resource "aws_s3_bucket" "env_bucket" {
  bucket = "tf-demo-${terraform.workspace}-bucket"
  acl    = "private"

  tags = {
    Name        = "Bucket for ${terraform.workspace}"
    Environment = terraform.workspace
  }
}
📄 variables.tf
hcl
Copy
Edit
variable "region" {
  type    = string
  default = "us-east-1"
}
📄 outputs.tf
hcl
Copy
Edit
output "bucket_name" {
  value = aws_s3_bucket.env_bucket.bucket
}
✅ How to Run
1️⃣ Initialize Terraform
bash
Copy
Edit
terraform init
2️⃣ Create Workspaces
bash
Copy
Edit
terraform workspace new dev
terraform workspace new prod
3️⃣ Switch to Dev and Apply
bash
Copy
Edit
terraform workspace select dev
terraform apply -auto-approve
Result: Creates an S3 bucket like tf-demo-dev-bucket

4️⃣ Switch to Prod and Apply
bash
Copy
Edit
terraform workspace select prod
terraform apply -auto-approve
Result: Creates tf-demo-prod-bucket — isolated state, same code.

🧠 Optional: Use Workspaces with Different Variables
If needed, create a terraform.tfvars.dev and terraform.tfvars.prod and pass them manually:

bash
Copy
Edit
terraform apply -var-file="terraform.tfvars.dev"
🛡️ Pre-Requirements
If using remote backend (backend.tf):

Create the S3 bucket manually

Enable versioning

Create DynamoDB table (for locking)

Example CLI for setup:

bash
Copy
Edit
aws s3api create-bucket --bucket my-terraform-backend-bucket --region us-east-1
aws dynamodb create-table \
  --table-name terraform-lock-table \
  --attribute-definitions AttributeName=LockID,AttributeType=S \
  --key-schema AttributeName=LockID,KeyType=HASH \
  --billing-mode PAY_PER_REQUEST